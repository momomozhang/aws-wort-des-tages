#!/bin/bash

set -e

THIS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# install core and development Python dependencies into the currently activated venv
function install {
    python -m pip install --upgrade pip
    python -m pip install --editable "$THIS_DIR/[dev]"
}

# run linting, formatting, and other static code quality tools
function lint {
    pre-commit run --all-files
}

# same as `lint` but with any special considerations for CI
function lint:ci {
    # We skip no-commit-to-branch since that blocks commits to `main`.
    # All merged PRs are commits to `main` so this must be disabled.
    SKIP=no-commit-to-branch pre-commit run --all-files
}

# execute tests that are not marked as `slow`
function test:quick {
    run-tests -m "not slow" ${@:-"$THIS_DIR/tests/"}
}

# simplified CI testing with package discovery validation
function validate:environment {
    echo "Validating testing environment..."

    # Check Python version
    if ! python -c "import sys; assert sys.version_info >= (3, 9)" 2>/dev/null; then
        echo "Error: Python 3.9+ required"
        return 1
    fi

    # Check package name validity
    local pkg_name="aws_wort_des_tages"
    if ! python -c "import re; assert re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', '$pkg_name')" 2>/dev/null; then
        echo "Error: Invalid package name: $pkg_name"
        return 1
    fi

    # Check source structure
    if [[ ! -d "src/$pkg_name" ]]; then
        echo "Error: Package source not found: src/$pkg_name"
        return 1
    fi

    echo "Environment validation passed"
    return 0
}

# execute tests against the installed package with simplified package discovery
function test:ci {
    local pkg_name="aws_wort_des_tages"

    # Simple package location discovery
    local pkg_location
    if pkg_location=$(python -c "
import sys
try:
    import $pkg_name
    print($pkg_name.__file__.rsplit('/', 1)[0])
except ImportError:
    # Fallback to source directory
    print('src/$pkg_name')
except Exception as e:
    print('src/$pkg_name')  # Default fallback
" 2>/dev/null); then
        echo "Testing package at: $pkg_location"
        COVERAGE_DIR="$pkg_location" run-tests
    else
        echo "Running tests without coverage"
        run-tests
    fi
}

# (example) ./run.sh test tests/test_states_info.py::test__slow_add
function run-tests {
    PYTEST_EXIT_STATUS=0
    python -m pytest ${@:-"$THIS_DIR/tests/"} \
        --cov "${COVERAGE_DIR:-$THIS_DIR/src}" \
        --cov-report html \
        --cov-report term \
        --cov-report xml \
        --junit-xml "$THIS_DIR/test-reports/report.xml" \
        --cov-fail-under 60 || ((PYTEST_EXIT_STATUS+=$?))
    mv coverage.xml "$THIS_DIR/test-reports/" || true
    mv htmlcov "$THIS_DIR/test-reports/" || true
    mv .coverage "$THIS_DIR/test-reports/" || true
    return $PYTEST_EXIT_STATUS
}

# simplified wheel testing without virtual environment
function test:wheel-locally {
    validate:environment || return 1

    echo "Building wheel..."
    clean
    pip install --upgrade build
    python -m build --wheel || { echo "Build failed"; return 1; }

    # Verify wheel was created
    local wheel_file
    wheel_file=$(ls dist/*.whl 2>/dev/null | head -1)
    if [[ -z "$wheel_file" ]]; then
        echo "Error: No wheel file created"
        return 1
    fi

    echo "Installing wheel: $wheel_file"
    pip install --upgrade --force-reinstall "$wheel_file" || {
        echo "Wheel installation failed"; return 1;
    }

    echo "Running tests against installed package..."
    test:ci

    echo "Wheel testing completed successfully"
}

# serve the html test coverage report on localhost:8000
function serve-coverage-report {
    python -m http.server --directory "$THIS_DIR/test-reports/htmlcov/" 8000
}

# build a wheel and sdist from the Python source code
function build {
    python -m build --sdist --wheel "$THIS_DIR/"
}

function release:test {
    lint
    clean
    build
    publish:test
}

function release:prod {
    release:test
    publish:prod
}

function publish:test {
    try-load-dotenv || true
    twine upload dist/* \
        --repository testpypi \
        --username=__token__ \
        --password="$TEST_PYPI_TOKEN"
}

function publish:prod {
    try-load-dotenv || true
    twine upload dist/* \
        --repository pypi \
        --username=__token__ \
        --password="$PROD_PYPI_TOKEN"
}

# remove all files generated by tests, builds, or operating this codebase
function clean {
    rm -rf dist build coverage.xml test-reports
    find . \
      -type d \
      \( \
        -name "*cache*" \
        -o -name "*.dist-info" \
        -o -name "*.egg-info" \
        -o -name "*htmlcov" \
      \) \
      -not -path "*env/*" \
      -exec rm -r {} + || true

    find . \
      -type f \
      -name "*.pyc" \
      -not -path "*env/*" \
      -exec rm {} +
}

# export the contents of .env as environment variables
function try-load-dotenv {
    if [ ! -f "$THIS_DIR/.env" ]; then
        echo "no .env file found"
        return 1
    fi

    while read -r line; do
        export "$line"
    done < <(grep -v '^#' "$THIS_DIR/.env" | grep -v '^$')
}

# print all functions in this file
function help {
    echo "$0 <task> <args>"
    echo "Tasks:"
    compgen -A function | cat -n
}

TIMEFORMAT="Task completed in %3lR"
time ${@:-help}
